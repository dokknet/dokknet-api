# SAM requires that all functions are in the same template.
# Feature request to allow splitting templates:
# https://github.com/awslabs/serverless-application-model/issues/866
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Dokknet API Gateway

Parameters:
  DeploymentTarget:
    Type: String
    Description: Deployment environment
    AllowedValues:
      - dev
      - staging
      - production
  # Signing key and usage policy are created by `scripts/create_signing_key.py`
  # bc CloudFormation doesn't support asymmetric keys.
  SigningKeyUsagePolicy:
    Type: String
    Description: Auth API asymmetric signing key usage policy name
    AllowedValues:
      - AuthService-Dev-SigningKeyUsagePolicy
      - AuthService-Staging-SigningKeyUsagePolicy
      - AuthService-Production-SigningKeyUsagePolicy
  WebsiteOrigin:
    Type: String
    Description: CORS origin for the website

Globals:
  Function:
    CodeUri: .
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Ref AWS::AccountId
        DEPLOYMENT_TARGET: !Ref DeploymentTarget
        MAIN_TABLE_NAME:
          Fn::ImportValue: !FindInMap [MainTableNames, !Ref DeploymentTarget, Name]
    MemorySize: 256
    Runtime: python3.8
    Timeout: 1  # seconds

Mappings:
  # DynamoDB main table names exported from DatabaseStack
  MainTableNames:
    dev:
      Name: "DatabaseService-Dev-MainTable"
    staging:
      Name: "DatabaseService-Staging-MainTable"
    production:
      Name: "DatabaseService-Production-MainTable"
  # DynamoDB main table read&write policy ARN references exported from DatabaseStack
  MainTableReadWritePolicyArn:
    dev:
      Name: "DatabaseService-Dev-MainTableReadWritePolicy"
    staging:
      Name: "DatabaseService-Staging-MainTableReadWritePolicy"
    production:
      Name: "DatabaseService-Production-MainTableReadWritePolicy"
  # Cognito user pool ids exported from CognitoService
  UserPoolIds:
    dev:
      Name: "CognitoService-Dev-UserPool"
    staging:
      Name: "CognitoService-Staging-UserPool"
    production:
      Name: "CognitoService-Production-UserPool"

Resources:
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !Sub
          - "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:API-Gateway-Access-Logs_${ApiId}"
          - { ApiId: !Ref RestApi }
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              - !Sub
                - "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}"
                - UserPoolId:
                    Fn::ImportValue: !FindInMap [UserPoolIds, !Ref DeploymentTarget, Name]
      Cors:
        AllowCredentials: True
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'DELETE,GET,OPTIONS,PUT,POST'"
        AllowOrigin: !Ref WebsiteOrigin
        MaxAge: "'600'"
      EndpointConfiguration: EDGE
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
          MetricsEnabled: true
      Name: !Sub "${AWS::StackName}-RestApi"
      # Setting this to avoid generating default stage named "Stage"
      OpenApiVersion: 3.0.2
      StageName: v1
  # Allows API GW to put logs into CloudWatch
  ApiLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: apigateway.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonApiGatewayPushToCloudWatchLogs
  # Allow API GW to create CloudWatch logs
  ApiAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiLogsRole.Arn

  GroupSubscriptions:
    Type: AWS::Serverless::Function
    Properties:
      Description: Group subscriptions resource handler
      Handler: app.handlers.groups.subscriptions.handler
      Policies:
        - Fn::ImportValue: !FindInMap [MainTableReadWritePolicyArn, !Ref DeploymentTarget, Name]
      Events:
        Get:
          Type: Api
          Properties:
            Method: get
            Path: /groups/{group_name}/subscriptions
            RestApiId: !Ref RestApi
        Put:
          Type: Api
          Properties:
            Method: put
            Path: /groups/{group_name}/subscriptions/{project_domain}
            RestApiId: !Ref RestApi
        Delete:
          Type: Api
          Properties:
            Method: delete
            Path: /groups/{group_name}/subscriptions/{project_domain}
            RestApiId: !Ref RestApi

  SessionCookie:
    Type: AWS::Serverless::Function
    Properties:
      Description: Get/delete session cookie for login on partner sites
      CodeUri: .
      Handler: app.handlers.auth.session_cookie.handler
      Policies:
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/${SigningKeyUsagePolicy}"
        - Fn::ImportValue: !FindInMap [MainTableReadWritePolicyArn, !Ref DeploymentTarget, Name]
      Events:
        Post:
          Type: Api
          Properties:
            Method: post
            Path: /auth/session-cookie
            RestApiId: !Ref RestApi
        Delete:
          Type: Api
          Properties:
            Method: delete
            Path: /auth/session-cookie
            RequestParameters:
              - method.request.header.Cookie:
                  Caching: false
                  Required: true
            RestApiId: !Ref RestApi

  UserSubscriptions:
    Type: AWS::Serverless::Function
    Properties:
      Description: User subscriptions resource handler
      Handler: app.handlers.user.subscriptions.handler
      Policies:
        - Fn::ImportValue: !FindInMap [MainTableReadWritePolicyArn, !Ref DeploymentTarget, Name]
      Events:
        Get:
          Type: Api
          Properties:
            Method: get
            Path: /user/subscriptions
            RestApiId: !Ref RestApi
        Put:
          Type: Api
          Properties:
            Method: put
            Path: /user/subscriptions/{project_domain}
            RestApiId: !Ref RestApi
        Delete:
          Type: Api
          Properties:
            Method: delete
            Path: /user/subscriptions/{project_domain}
            RestApiId: !Ref RestApi

Outputs:
  RestApiId:
    Description: Backend API id
    Value: !Ref RestApi
    Export:
      Name: !Sub "${AWS::StackName}-RestApi"
