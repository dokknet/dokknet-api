AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Dokknet Authentication Service

Parameters:
  DeploymentTarget:
    Type: String
    Description: Deployment environment
    AllowedValues:
      - dev
      - staging
      - production
  # Signing key and usage policy are created by `scripts/create_signing_key.py`
  # bc Cloudformation doesn't support asymmetric keys.
  SigningKeyUsagePolicy:
    Type: String
    Description: Auth API asymmetric signing key usage policy name
    AllowedValues:
      - AuthService-Dev-SigningKeyUsagePolicy
      - AuthService-Staging-SigningKeyUsagePolicy
      - AuthService-Production-SigningKeyUsagePolicy
  WebsiteOrigin:
    Type: String
    Description: CORS origin for the website

Globals:
  Function:
    Runtime: python3.8
    # Seconds
    Timeout: 3
    MemorySize: 256
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Ref AWS::AccountId
        DEPLOYMENT_TARGET: !Ref DeploymentTarget

Mappings:
  # DynamoDB main table names exported from DatabaseStack
  MainTableNames:
    dev:
      Name: "DatabaseService-Dev-MainTable"
    staging:
      Name: "DatabaseService-Staging-MainTable"
    production:
      Name: "DatabaseService-Production-MainTable"
  # DynamoDB main table read&write policy ARN references exported from DatabaseStack
  MainTableReadWritePolicyArn:
    dev:
      Name: "DatabaseService-Dev-MainTableReadWritePolicy"
    staging:
      Name: "DatabaseService-Staging-MainTableReadWritePolicy"
    production:
      Name: "DatabaseService-Production-MainTableReadWritePolicy"
  # Cognito user pool ids exported from CognitoService
  UserPoolIds:
    dev:
      Name: "CognitoService-Dev-UserPool"
    staging:
      Name: "CognitoService-Staging-UserPool"
    production:
      Name: "CognitoService-Production-UserPool"

Resources:
  RestApi:
    # Can't use AWS::Serverless::Api due to missing features and bugs
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: An API Gateway with a Lambda Integration
      EndpointConfiguration:
        Types:
          - EDGE
      Name: RestApi
  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: 'auth'
      RestApiId: !Ref RestApi
  GetSessionCookieResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource
      PathPart: 'session-cookie'
      RestApiId: !Ref RestApi
  RequestParameterValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: !Sub "${AWS::StackName}-RequestParameterValidator"
      RestApiId: !Ref RestApi
      ValidateRequestParameters: true
  GetSessionCookieAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: cognito-authorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref RestApi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !Sub
          - "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}"
          - UserPoolId:
              Fn::ImportValue: !FindInMap [UserPoolIds, !Ref DeploymentTarget, Name]
  GetSessionCookiDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref GetSessionCookieResource
      RestApiId: !Ref RestApi
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref GetSessionCookieAuthorizer
      #AuthorizationScopes:
      #  - com.dokknet.app/globalSessionCookie
      HttpMethod: DELETE
      Integration:
        Credentials: !GetAtt ApiIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 5000
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSessionCookie.Arn}/invocations"
      OperationName: 'lambda'
      RequestParameters:
        method.request.header.Cookie: True
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            text/html: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true
      RequestValidatorId: !Ref RequestParameterValidator
  GetSessionCookieGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref GetSessionCookieResource
      RestApiId: !Ref RestApi
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref GetSessionCookieAuthorizer
      #AuthorizationScopes:
      #  - com.dokknet.app/globalSessionCookie
      HttpMethod: GET
      Integration:
        Credentials: !GetAtt ApiIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 5000
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSessionCookie.Arn}/invocations"
      OperationName: 'lambda'
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            text/html: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true
  GetSessionCookieOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref GetSessionCookieResource
      RestApiId: !Ref RestApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Origin: !Ref WebsiteOrigin
            ResponseTemplates:
              text/html: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            text/html: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
            method.response.header.Access-Control-Allow-Origin: true
  # DEPLOYMENT_ID is set in the "scripts/deploy.py" script to generate a
  # unique resource and thus force deployment. Alternative would be
  # CF macro which is 10x more complicated or separate API call which is
  # fragile.
  Deployment$DEPLOYMENT_ID$:
    Type: AWS::ApiGateway::Deployment
    Metadata:
      cfn-lint:
        config:
          # Ignore alphanumeric name requirement
          ignore_checks:
            - E3006
    # Important to specify all methods, otherwise changes to them won't get
    # deployed.
    DependsOn: [GetSessionCookieGetMethod, GetSessionCookieOptionsMethod]
    # Retain deployment history
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: "Global User Auth API Deployment"
      RestApiId: !Ref RestApi
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: RestApi
      DeploymentId:
        Ref: Deployment$DEPLOYMENT_ID$
      StageName: v1
      MethodSettings:
          - DataTraceEnabled: true
            HttpMethod: "*"
            LoggingLevel: INFO
            ResourcePath: "/*"
            MetricsEnabled: true
      AccessLogSetting:
        DestinationArn: !Sub
          - "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:API-Gateway-Access-Logs_${ApiId}"
          - { ApiId: !Ref RestApi }
  ApiIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:InvokeFunction'
                Resource: !GetAtt GetSessionCookie.Arn
  # Allows API GW to put logs into CloudWatch
  ApiLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: apigateway.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonApiGatewayPushToCloudWatchLogs
  # Allow API GW to create CloudWatch logs
  ApiAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiLogsRole.Arn
  # Invoked in Method
  GetSessionCookie:
    Type: AWS::Serverless::Function
    Properties:
      Description: Get session cookie for login on partner sites
      CodeUri: .
      Handler: app.handlers.auth.session_cookie.handler
      Environment:
        Variables:
          MAIN_TABLE_NAME:
            Fn::ImportValue: !FindInMap [MainTableNames, !Ref DeploymentTarget, Name]
      Policies:
        - Fn::ImportValue: !FindInMap [MainTableReadWritePolicyArn, !Ref DeploymentTarget, Name]
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/${SigningKeyUsagePolicy}"
Outputs:
  RestApiId:
    Description: Backend API id
    Value: !Ref RestApi
    Export:
      Name: !Sub "${AWS::StackName}-RestApi"

  RestApiStage:
    Description: Backend API stage
    Value: !Ref ApiStage
    Export:
      Name: !Sub "${AWS::StackName}-RestApiStage"
