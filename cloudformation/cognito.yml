# Based on https://github.com/aws-samples/amazon-cognito-passwordless-email-auth

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Dokknet Cognito Service

Parameters:
  DeploymentTarget:
    Type: String
    Description: Deployment environment
    AllowedValues:
      - dev
      - staging
      - production

Globals:
  Function:
    Runtime: python3.8
    # Seconds
    Timeout: 1
    MemorySize: 128
    Environment:
      Variables:
        AWS_ACCOUNT_ID: !Ref AWS::AccountId
        DEPLOYMENT_TARGET: !Ref DeploymentTarget

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub
        - "${Stage}.dokknet.cognito.user_pool"
        - { Stage: !Ref DeploymentTarget}
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      UsernameAttributes:
        - email
      MfaConfiguration: "OFF"
      Policies:
        # Auto generated passwords, not used by users.
        # Required, bc Cognito doesn't allow users
        # without passwords.
        PasswordPolicy:
          MinimumLength: 32
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: false
          RequireSymbols: false
      LambdaConfig:
        PreSignUp: !GetAtt PreSignUp.Arn
        CreateAuthChallenge: !GetAtt CreateAuthChallenge.Arn
        DefineAuthChallenge: !GetAtt DefineAuthChallenge.Arn
        VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeResponse.Arn
        PostAuthentication: !GetAtt PostAuth.Arn

  DefineAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      Description: Cognito Define Auth Challenge event handler
      CodeUri: .
      Handler: app.handlers.cognito.define_auth_challenge.handler

  CreateAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      Description: Cognito Create Auth Challenge event handler
      CodeUri: .
      Handler: app.handlers.cognito.create_auth_challenge.handler
      # In case AWS SES is slow to queue mail
      Timeout: 3
      MemorySize: 256
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
              # TODO (abiro) restrict ses access
              Resource: "*"

  VerifyAuthChallengeResponse:
    Type: AWS::Serverless::Function
    Properties:
      Description: Cognito Verify Auth Challenge event handler
      CodeUri: .
      Handler: app.handlers.cognito.verify_auth_challenge.handler

  PreSignUp:
    Type: AWS::Serverless::Function
    Properties:
      Description: Cognito Pre Sign Up event handler
      CodeUri: .
      Handler: app.handlers.cognito.pre_signup.handler

  PostAuth:
    Type: AWS::Serverless::Function
    Properties:
      Description: Cognito Post Authentication Challenge event handler
      CodeUri: .
      Handler: app.handlers.cognito.post_auth.handler
      # Does network call
      Timeout: 3
      MemorySize: 256

  # Can't user Role property of AWS:Serverless::Function, bc
  # that would create circular dependency with UserPool.
  UpdateUserAttributesPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CognitoIdpAdminUpdateUserAttributes
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminUpdateUserAttributes
            Resource: !Sub
              - "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}"
              - { UserPoolId: !Ref UserPool}
      Roles:
        # Auto-generated by SAM
        - !Ref PostAuthRole

  DefineAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DefineAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  CreateAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  VerifyAuthChallengeResponseInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt VerifyAuthChallengeResponse.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  PreSignUpInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUp.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  PostAuthInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostAuth.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  UserPoolResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: com.dokknet.app
      Name: User API
      UserPoolId: !Ref UserPool
      Scopes:
        - ScopeName: globalSessionCookie
          ScopeDescription: "Get global session cookie"

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: UserPoolResourceServer
    Properties:
      ClientName: dahsboard-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      PreventUserExistenceErrors: ENABLED
      AllowedOAuthScopes:
        - com.dokknet.app/globalSessionCookie
      ExplicitAuthFlows:
        - CUSTOM_AUTH_FLOW_ONLY

Outputs:
  UserPoolId:
    Description: ID of the User Pool
    Value: !Ref UserPool
    Export:
      Name: !Sub "${AWS::StackName}-UserPool"
  UserPoolClientId:
    Description: ID of the User Pool Client
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolClient"
